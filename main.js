'use strict';

const countriesContainer = document.querySelector('.countries');
const btn = document.querySelector('.btn-country');
const reverseGeoApiKey = '2782861fb2944909b32da2a65d8946dc';
const inputEl = document.querySelector('.autocomplete-input');
const ulForAutocomplete = document.querySelector('.autocomplete-wrapper');
const dropdown = document.querySelector('.dropdown');

// ! –í–ù–ò–ú–ê–ù–ò–ï . –£–î–ê–õ–ò API –∫–ª—é—á –ø–æ—Å–ª–µ auth= –ø—Ä–∏ —Ä–µ–ª–∏–∑–µ

// Fetch all countries
// const arrOfAllCountriesName = [];
// function getAllCountries() {
//   fetch(`https://restcountries.com/v3.1/all`)
//     .then((response) => {
//       return response.json();
//     })
//     .then((data) => {
//       data;
//       console.log(data);
//       for (const country of data) {
//         arrOfAllCountries.push([
//           country.name.common,
//           country.translations.rus.common,
//         ]);
//       }
//     });
// }
// getAllCountriesName();
// console.log(arrOfAllCountries);

// Async await all countries

let countryNames = [];
async function getAllCountriesName() {
  const response = await fetch(`https://restcountries.com/v3.1/all`);
  const data = await response.json();

  countryNames = data.map((country) => {
    return country.name.common;
  });

  // country.translations.rus.common,
}
getAllCountriesName();

// –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –≤–≤–æ–¥–µ –≤ input
inputEl.addEventListener('input', onInputChange);

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–ª–µ input, —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ–π array, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Å—Ç—Ä–∞–Ω–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ –≤–≤–æ–¥–∏–º—ã–º –±—É–∫–≤–∞–º
function onInputChange() {
  removeAutocompleteDropdown();
  const value = inputEl.value.toLowerCase();

  if (value.length === 0) return;

  const filteredNames = [];
  for (let countryName of countryNames) {
    if (countryName.substring(0, value.length).toLowerCase() === value) {
      filteredNames.push(countryName);
    }
  }
  console.log(filteredNames);
  createAutocompleteDropdown(filteredNames);
}
// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–ª–∞—Å—Å–∞–º–∏ –∏ id
function createAutocompleteDropdown(list) {
  const listEl = document.createElement('ul');
  listEl.className = 'autocomplete-list';
  // –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—à–µ–≥–æ—Å—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
  listEl.id = 'autocomplete-list';

  list.forEach((country) => {
    const listItem = document.createElement('li');
    const countryButton = document.createElement('button');
    countryButton.innerHTML = country;
    // –í—ã–∑–æ–≤ onCountryButtonClick –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
    countryButton.addEventListener('click', onCountryButtonClick);
    listItem.appendChild(countryButton);
    listEl.appendChild(listItem);
  });

  ulForAutocomplete.appendChild(listEl);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
function removeAutocompleteDropdown() {
  const listEl = document.querySelector('#autocomplete-list');
  if (listEl) listEl.remove();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ + –∑–∞–ø—É—Å–∫ getCountryData
function onCountryButtonClick(e) {
  e.preventDefault();
  const buttonEl = e.target;
  inputEl.value = buttonEl.innerHTML;

  getCountryData(inputEl.value);

  removeAutocompleteDropdown();
}

// inputEl.addEventListener('keyup', (e) => {
//   if (e.code === 'Enter') {
//     console.log(buttonEl.innerHTML);
//     // if(buttonEl.innerHTML === )
//     console.log('enter was pressed');
//   }
// });

// // –§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML –∏ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É
// function renderCards(data, className = '') {
//   const html = `<article class="country ${className}">
//         <img class="country__img" src="${data.flags.svg}" />
//         <div class="country__data">
//           <h3 class="country__name">${data.name.common}</h3>
//           <h4 class="country__region">${data.region}</h4>
//           <p class="country__row"><span>üë´</span>${data.population}</p>
//           <p class="country__row"><span>üó£Ô∏è</span>${
//             Object.entries(data.languages)[0][1]
//           }</p>
//           <p class="country__row"><span>üí∞</span>${
//             Object.entries(Object.entries(data.currencies)[0][1])[0][1]
//           }</p>
//         </div>
//       </article>`;
//   // –í—ã–≤–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ä—Ç–æ—á–∫—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
//   countriesContainer.insertAdjacentHTML('beforeend', html);
//   countriesContainer.style.opacity = '1';
// }
// // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É
// function getCountryData(country) {
//   const request = new XMLHttpRequest();
//   request.open('GET', `https://restcountries.com/v3.1/name/${country}`);
//   request.send();

//   // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å–ª–µ –∏—Ö –∑–∞–≥—Ä—É–∑–∫–∏
//   request.addEventListener('load', function () {
//     const [data] = JSON.parse(this.responseText);
//     const neighbour = data.borders[0];
//     // –í—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–æ–π
//     renderCards(data);

//     // –ó–∞–ø—Ä–æ—Å –Ω–∫ —Å–µ—Ä–≤–µ—É –≤–Ω—É—Ç—Ä–∏ –ø–µ—Ä–≤–æ–π call-back —Ñ—É–Ω–∫—Ü–∏–∏
//     const request2 = new XMLHttpRequest();
//     request2.open('GET', `https://restcountries.com/v3.1/alpha/${neighbour}`);
//     request2.send();
//     // // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–µ–π—Å—Ç–≤–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å–ª–µ –∏—Ö —â–∞–≥—Ä—É–∑–∫–∏
//     request2.addEventListener('load', function () {
//       const [data2] = JSON.parse(this.responseText);
//       // –í—ã–≤—Ä–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ—Å–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω—ã
//       renderCards(data2, 'neighbour');
//     });
//   });
// }
// btn.addEventListener('click', () => {
//   getCountryData('usa');
// });

// * Fetch - –¥–µ–ª–∞–µ–º —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ —Å–≤–µ—Ä—Ö—É, –Ω–æ —Å Fetch
/*
function getCountryData (country) {
  const request = fetch('https://restcountries.com/v3.1/name/${country}')
  console.log(request); // Promise¬†{<pending>}
}
getCountryData('russia')
  –í fetch() –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–µ—Ä–µ–¥–∞–µ–º URL –æ—Ç–∫—É–¥–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç XMLHttpRequest –Ω–µ –ø–∏—à–µ–º open (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∏ GET), send, –≠—Ç–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  –í—ã–≤–æ–¥—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç fetch –≤ –∫–æ–Ω—Å–æ–ª—å, –º—ã –≤–∏–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - Promise
  Promise - –Ω–µ–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ—Ç fetch, –ª–∏–±–æ –≤ —Å–ª—É—á–∞–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å–¥–µ–ª–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
  –¢.–µ. —Å–µ–π—á–∞—Å —Ñ—É–Ω–∫—Ü–∏—è fetch —Å—Ç–∞–ª–∞ Promise, –∫ –∫–æ—Ç–æ—Ä–æ–π –º—ã –º–æ–∂–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ THEN - –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å—Ç–∞—Ç—É—Å–æ–≤. –û–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ Promise
  –≠—Ç–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ XMLHttpRequest.
  –ú–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ THEN –¥–ª—è FETCH, —ç—Ç–æ –∞–Ω–∞–ª–æ–≥–∏—è SEND –¥–ª—è XMLHTTPREQUEST
  Fetch('URL').THEN(function(response){})...

  const request = fetch('https://restcountries.com/v3.1/name/${country}').THEN(function(response){console.log(response)}) ;  // Response - –ö—É—á–∞ —Å—Ç–∞—Ç—É—Å–æ–≤

  –ù–û –ì–î–ï –î–ê–ù–ù–´–ï?!
  –û–ù–ò –í THEN, –Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ò —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–∑ JSON –≤ –æ–±—ä–µ–∫—Ç —Ç—É—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å, –∞ –∏–º–µ–Ω–Ω–æ –ú–ï–¢–û–î JSON.
  smth.json().
  –¢–∞–∫ –º—ã —Ç–æ–∂–µ –ø–æ–ª—É—á–∏–º –ø—Ä–æ–º–∏—Å

  const request = fetch('https://restcountries.com/v3.1/name/${country}').THEN(function(response){console.log(response.json)}); // –æ—á–µ—Ä–µ–¥–Ω–æ–π Promise, –Ω–æ —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å PromiseResult - –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö

  –¢–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–ø—è—Ç—å –ø—Ä–æ–º–∏—Å, –º—ã –±—É–¥–µ–º –æ–ø—è—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å THEN
  const request = fetch('https://restcountries.com/v3.1/name/${country}')
  .THEN(function(response){
  return response.json
  }).THEN(function(data){console.log(data)});

  –ò –µ—â–µ —Ä–∞–∑. FETCH
  1) —Å–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å const request = fetch('URL') - –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–∏—Å - —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ Fetch
  2) .then(callback(response){return response.json()] - —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–∏—Å –≤ —Å—Ç–∞—Ç—É—Å—ã –∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ json –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –º–∞—Å—Å–≤–∞ ; –ù–æ —ç—Ç–æ –æ–ø—è—Ç—å –ø—Ä–æ–º–∏—Å
  3) .then(callBack(data) {return data} - —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –µ—â–µ –æ–¥–∏–Ω –ø—Ä–æ–º–∏—Å, —É–∂–µ –ø–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
*/

//asdasdasdasdasdaasdasdsa
//asdasdasdasdasdaasdasdsa
//asdasdasdasdasdaasdasdsa
//asdasdasdasdasdaasdasdsa
//asdasdasdasdasdaasdasdsa

// Fetch –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
// function renderCards(data, className = '') {
//   const html = `<article class="country ${className}">
//           <img class="country__img" src="${data.flags.svg}" />
//           <div class="country__data">
//             <h3 class="country__name">${data.name.common}</h3>
//             <h4 class="country__region">${data.region}</h4>
//             <p class="country__row"><span>üë´</span>${data.population}</p>
//             <p class="country__row"><span>üó£Ô∏è</span>${
//               Object.entries(data.languages)[0][1]
//             }</p>
//             <p class="country__row"><span>üí∞</span>${
//               Object.entries(Object.entries(data.currencies)[0][1])[0][1]
//             }</p>
//           </div>
//         </article>`;
//   countriesContainer.insertAdjacentHTML('beforeend', html);
//   countriesContainer.style.opacity = 1;
// }

// function getCountryData(country) {
//   // –°—Ç—Ä–∞–Ω–∞
//   const request = fetch(`https://restcountries.com/v3.1/name/${country}`)
//     .then((response) => {
//       return response.json();
//     })
//     .then((data) => {
//       renderCards(data[0]);
//       const neighbour = data[0].borders[0];
//       // –°—Ç—Ä–∞–Ω–∞ —Å–æ—Å–µ–¥
//       // –ß—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∞–¥—Å–∫–æ–π –ø–∏—Ä–∞–º–∏–¥—ã –≤—ã–∑–æ–≤–æ–≤, –¥–µ–ª–∞–µ–º return
//       return fetch(`https://restcountries.com/v3.1/alpha/${neighbour}`)
//         .then((response) => {
//           return response.json();
//         })
//         .then((data) => {
//           // –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º, —Ç.–∫. data - –º–∞—Å—Å–∏–≤ –∏ flags –ø—Ä–æ—á–µ—Å—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –±—É–¥–µ—Ç —Ä—É–≥–∞—Ç—å—Å—è
//           const [res] = data;
//           console.log(res);
//           renderCards(res, 'neighbour');
//         });
//     });
// }
// btn.addEventListener('click', () => {
//   getCountryData('usa');
// });

//! Fetch —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–ª–∏ –°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω –Ω–µ—Ç + –¥–æ–±–∞–≤–∏–ª–∏ –≤—Å–µ —Å–æ—Å–µ–¥–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
// function getCountryFromInput(){
function renderCards(data, className = '') {
  const html = `<article class="country ${className}">
          <img class="country__img" src="${data.flags.svg}" />
          <div class="country__data">
            <h3 class="country__name">${data.name.common}</h3>
            <h4 class="country__region">${data.region}</h4>
            <p class="country__row"><span>üë´</span>${data.population}</p>
            <p class="country__row"><span>üó£Ô∏è</span>${
              Object.entries(data.languages)[0][1]
            }</p>
            <p class="country__row"><span>üí∞</span>${
              Object.entries(Object.entries(data.currencies)[0][1])[0][1]
            }</p>
          </div>
        </article>`;
  countriesContainer.insertAdjacentHTML('beforeend', html);
}

// –†–µ–Ω–¥–µ—Ä –æ—à–∏–±–∫–∏ –≤ HTML
function renderError(message) {
  countriesContainer.insertAdjacentHTML('beforeend', message);
}

// –§—É–Ω–∫—Ü–∏—è fetch —Å –ø—Ä–æ–±—Ä–æ—Å–æ–º –æ—à–∏–±–∫–∏
function getJSON(url, errorMsg = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. ') {
  return fetch(url).then((response) => {
    if (!response.ok) {
      throw new Error(`${errorMsg} ${response.status})`);
    }
    return response.json();
  });
}

function getCountryData(country) {
  // –°—Ç—Ä–∞–Ω–∞, –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
  getJSON(
    `https://restcountries.com/v3.1/name/${country}`,
    '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–µ—Ä–æ—è—Ç–Ω–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω—ã –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞'
  )
    .then((data) => {
      renderCards(data[0]);

      // –°—Ç—Ä–∞–Ω—ã —Å–æ—Å–µ–¥–∏
      const neighboursData = data[0].borders;
      console.log(neighboursData);
      if (!neighboursData) {
        throw new Error(`—Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω –Ω–µ—Ç`);
      }
      // –°–¥–µ–ª–∞–µ–º —á–µ—Ä–µ–∑ Promise.all –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ—Å–µ–¥—É. –ú–∞—Å—Å–∏–≤ –¥–ª—è PromiseReults –∫–∞–∂–¥–æ–π —Å–æ—Å–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω—ã
      const neighboursFetches = neighboursData.map((neighbour) =>
        getJSON(`https://restcountries.com/v3.1/alpha/${neighbour}`)
      );
      return Promise.all(neighboursFetches);
    })
    .then((neighbours) => {
      for (const neighbourTitle of neighbours) {
        const [res] = neighbourTitle;
        renderCards(res, 'neighbour');
      }
    })
    .catch(function (err) {
      renderError(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ - ${err.message}.`);
    })
    .finally(() => {
      countriesContainer.style.opacity = 1;
    });
}
// btn.addEventListener('click', () => {
//   getCountryData('austria');
// });

// dsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfds

//! Reverse geolocation fetch then
// function renderCards(data, className = '') {
//   const html = `<article class="country ${className}">
//           <img class="country__img" src="${data.flags.svg}" />
//           <div class="country__data">
//             <h3 class="country__name">${data.name.common}</h3>
//             <h4 class="country__region">${data.region}</h4>
//             <p class="country__row"><span>üë´</span>${data.population}</p>
//             <p class="country__row"><span>üó£Ô∏è</span>${
//               Object.entries(data.languages)[0][1]
//             }</p>
//             <p class="country__row"><span>üí∞</span>${
//               Object.entries(Object.entries(data.currencies)[0][1])[0][1]
//             }</p>
//           </div>
//         </article>`;
//   countriesContainer.insertAdjacentHTML('beforeend', html);
// }
// // –†–µ–Ω–¥–µ—Ä –æ—à–∏–±–∫–∏ –≤ HTML
// function renderError(message) {
//   countriesContainer.insertAdjacentHTML('beforeend', message);
// }
// // –§—É–Ω–∫—Ü–∏—è fetch —Å –ø—Ä–æ–±—Ä–æ—Å–æ–º –æ—à–∏–±–∫–∏
// function getJSON(url, errorMsg = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. ') {
//   return fetch(url).then((response) => {
//     if (!response.ok) {
//       throw new Error(`${errorMsg} ${response.status})`);
//     }
//     return response.json();
//   });
// }
// // –°—Ç—Ä–∞–Ω–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
// function getCountryByLocation() {
//   // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
//   navigator.geolocation.getCurrentPosition(
//     function (pos) {
//       const { latitude, longitude } = pos.coords;
//       console.log(latitude);
//       console.log(longitude);
//       fetch(
//         `https://api.geoapify.com/v1/geocode/reverse?lat=${latitude}&lon=${longitude}&format=json&apiKey=${reverseGeoApiKey}`
//       )
//         .then((response) => {
//           //         –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
//           if (!response.ok) {
//             throw new Error(`–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ (${response.status})`);
//           }
//           return response.json();
//         })
//         // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
//         .then((result) => {
//           console.log(result.results[0].country);
//           const country = result.results[0].country;
//           return fetch(`https://restcountries.com/v3.1/name/${country}`);
//         })
//         .then((response) => {
//           return response.json();
//         })
//         .then((data) => {
//           console.log(data[0]);
//           renderCards(data[0]);
//           // –°—Ç—Ä–∞–Ω–∞ —Å–æ—Å–µ–¥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω
//           const neighbourData = data[0].borders;
//           if (!neighbourData) {
//             throw new Error(`—Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω –Ω–µ—Ç`);
//           }
//           const neighbour = data[0].borders[0];
//           return getJSON(
//             `https://restcountries.com/v3.1/alpha/${neighbour}`
//           ).then((data) => {
//             const [res] = data;
//             renderCards(res, 'neighbour');
//           });
//         })
//         .catch(function (err) {
//           renderError(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ ${err.message}.`);
//           console.log(err);
//         })
//         .finally(() => {
//           countriesContainer.style.opacity = 1;
//         });
//     },
//     function () {
//       alert('–í—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ —Å–≤–æ—é –≥–µ–æ-–ª–æ–∫–∞—Ü–∏—é');
//     }
//   );
// }

// btn.addEventListener('click', () => {
//   getCountryByLocation();
// });

// new Promise(function (result, reject) {
//   navigator.geolocation.getCurrentPosition(result, reject);
// }) // –ö–æ–≥–¥–∞ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ –≤ result, –∞ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ç–æ –º–æ–∂–Ω–æ –∏ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é  CallBack —Ñ—É–Ω–∫—Ü–∏–∏. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ Promise –∏ –≤—Å–µ.
//   .then(function (data) {
//     console.log(data);
//   });

// ! Async/Await –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –≤
function renderCards(data, className = '') {
  const html = `<article class="country ${className}">
          <img class="country__img" src="${data.flags.svg}" />
          <div class="country__data">
            <h3 class="country__name">${data.name.common}</h3>
            <h4 class="country__region">${data.region}</h4>
            <p class="country__row"><span>üë´</span>${data.population}</p>
            <p class="country__row"><span>üó£Ô∏è</span>${
              Object.entries(data.languages)[0][1]
            }</p>
            <p class="country__row"><span>üí∞</span>${
              Object.entries(Object.entries(data.currencies)[0][1])[0][1]
            }</p>
          </div>
        </article>`;
  countriesContainer.insertAdjacentHTML('beforeend', html);
}

// –†–µ–Ω–¥–µ—Ä –æ—à–∏–±–∫–∏ –≤ HTML
function renderError(message) {
  countriesContainer.insertAdjacentHTML('beforeend', message);
}

// –§—É–Ω–∫—Ü–∏—è fetch —Å –ø—Ä–æ–±—Ä–æ—Å–æ–º –æ—à–∏–±–∫–∏
async function getJSON(url, errorMsg = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. ') {
  const response = await fetch(url);
  if (!response.ok) {
    throw new Error(`${errorMsg} ${response.status})`);
  }
  return response.json();
}

async function getCountryData(country) {
  // –°—Ç—Ä–∞–Ω–∞, –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
  try {
    const data = await getJSON(
      `https://restcountries.com/v3.1/name/${country}`,
      '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–µ—Ä–æ—è—Ç–Ω–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω—ã –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞'
    );
    renderCards(data[0]);
    // –°—Ç—Ä–∞–Ω—ã —Å–æ—Å–µ–¥–∏
    const neighboursData = data[0].borders;
    if (!neighboursData) {
      throw new Error(`—Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω –Ω–µ—Ç`);
    }
    // –°–¥–µ–ª–∞–µ–º —á–µ—Ä–µ–∑ Promise.all –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ—Å–µ–¥—É. –ú–∞—Å—Å–∏–≤ –¥–ª—è PromiseReults –∫–∞–∂–¥–æ–π —Å–æ—Å–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω—ã
    const neighboursFetches = neighboursData.map((neighbour) =>
      getJSON(`https://restcountries.com/v3.1/alpha/${neighbour}`)
    );
    const neighbours = await Promise.all(neighboursFetches);
    for (const neighbourTitle of neighbours) {
      const [res] = neighbourTitle;
      renderCards(res, 'neighbour');
    }
  } catch (err) {
    renderError(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ - ${err.message}.`);
  } finally {
    countriesContainer.style.opacity = 1;
  }
}

// ! –í—ã–≤–µ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–ª–∏—Ü. –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô Async/Await
// async function get3Capital(c1, c2, c3) {
//   try {
//     const data = await Promise.all([
//       fetch(`https://restcountries.com/v3.1/name/${c1}`).then(function (
//         response
//       ) {
//         return response.json();
//       }),
//       fetch(`https://restcountries.com/v3.1/name/${c2}`).then(function (
//         response
//       ) {
//         return response.json();
//       }),
//       fetch(`https://restcountries.com/v3.1/name/${c3}`).then(function (
//         response
//       ) {
//         return response.json();
//       }),
//     ]);
//     console.log(data.map((val) => val[0].capital.join(''))); // (3)¬†['Washington, D.C.', 'Ankara', 'Paris']
//   } catch (err) {
//     console.log(err);
//   }
// }
// get3Capital('usa', 'turkey', 'france');
/*

–ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–∏–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –Ω–∞–∂–º–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É, —Ç–æ —É–∫–∞–∂–µ—Ç –Ω–∞ –æ—à–∏–±–∫—É –≤ Fetch - Uncaught (in promise)
–ù–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ª–æ–≤–∏—Ç—å —ç—Ç—É –æ—à–∏–±–∫—É
–ü–ï–†–í–´–ô THEN –∏–º–µ–µ—Ç 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - 1-func —á—Ç–æ –±—É–¥–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç URL, 2-—Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç URL –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏
–í—ã–≤–µ–¥–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å, –ø–æ–ª—É—á–∞–µ–º –Ω–µ –∫—Ä–∞—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
TypeError: Failed to fetch
–ö–æ–ø–∏—Ä—É–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –ø–µ—Ä–≤—ã–µ .then
–ù–æ —Ç–∞–∫ –¥–æ–ª–≥–æ, –Ω—É–¥–Ω–æ, –µ–±–∞–Ω–æ, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –∫–æ–¥. –ï—Å—Ç—å —Å–ø–æ—Å–æ–± —É–±—Ä–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ - CATCH

–ò–°–ü–û–õ–¨–ó–£–ï–ú .CATCH –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ then –ø–µ—Ä–≤–æ–≥–æ fetch –ß–ï–†–ï–ó –¢–û–ß–ï–ß–ù–£–Æ –ó–ê–ü–ò–°–¨, —Ç.–µ. —Ü–µ–ø–æ—á–∫–æ–π (–µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –µ—Å—Ç—å, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
–¢–∞–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏ —Ç–æ–∂–µ –≤—ã–≤–æ–¥—è—Ç—Å—è –æ—Ç–ª–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏.
–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º –∏–Ω—Ñ—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–°–æ–∑–¥–∞–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –∏ –±—É–¥–µ–º –≤—Å—Ç–∞–≤–ª—è—Ç—å –µ–µ –≤ —ç—Ç–æ—Ç CATCH

.FINALLY - –º–µ—Ç–æ–¥ —Å callback, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –Ω–µ –≤–∞–∂–Ω–æ, –±—ã–ª –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.
–ó–∞–ø–∏—Å—å –æ–ø—è—Ç—å, –∫–∞–∫ —É THEN –∏ —É CATCH —Ç–æ—á–µ—á–Ω–∞—è
–¢—É–¥–∞ –º–æ–∂–µ–º —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –≤—Å–µ —Ç–æ, —á—Ç–æ –∏–º–µ–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—à–∏–±–æ–∫. –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ —ç—Ç–æ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç—É
  countriesContainer.style.opacity = 1;

–í—Å–µ –∑–∞–µ–±–∏—Å—å, –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç


–ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ–µ, —Ç–æ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ - —Å–µ—Ä–≤–µ—Ä –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å –∏ –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É 404. –ß—Ç–æ–±—ã —ç—Ç–æ–≥–æ –∏–∑–±–µ–∂–∞—Ç—å, –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–π –æ—à–∏–±–∫–∏ **–≤ –ü–ï–†–í–û–ú THEN —Ñ—É–Ω–∫—Ü–∏–∏ FETCH**
–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ —É—Å–ª–æ–≤–∏—é

–ù–µ–º–Ω–æ–≥–æ —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç, —á—Ç–æ –µ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–∞—é—â–∏–π—Å—è then. –ß—É—Ç—å –ø–æ–∫–æ–ª–¥—É–µ–º - —Å–æ–∑–¥–∞–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–º–æ—â–Ω–∏–∫
function getJSON.
–í—Å—Ç–∞–≤–∏–º —Ç—É–¥–∞ url, –ø–µ—Ä–≤—ã–π then –∏ –∑–∞—Ç–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤–µ–∑–¥–µ, –≥–¥–µ –±—ã–ª–∏ –ø–µ—Ä–≤—ã–µ then

–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ - –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —É —Å—Ç—Ä–∞–Ω—ã –Ω–µ—Ç —Å–æ—Å–µ–¥–µ–π –≤–æ–≤—Å–µ.
*/
