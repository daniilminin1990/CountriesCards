"use strict";

const btn = document.querySelector(".btn-country");
const countriesContainer = document.querySelector(".countries");

///////////////////////////////////////
/* 
Асинхронный код

todo 13-1 Практика 23 Асинхронный код. Что такое синхронный и асинхронный код
Что такое синхронный и асинхронный код

Синхронный код - код, который выполняется построчно сверху вниз
* В синхронном коде инструкции выполняются последовательно, одна за другой, в том порядке, в котором они были написаны.
* Каждая операция должна завершиться, прежде чем следующая будет выполнена.
* Код ожидает завершения каждой операции, прежде чем переходить к следующей.

Асинхронный код (Asynchronous code):
* В асинхронном коде некоторые операции могут быть запущены, но не завершены немедленно. Вместо этого они выполняются в фоновом режиме или по завершении определенных событий.
* Код не ожидает завершения асинхронных операций и продолжает выполнять другие инструкции.
* Результат асинхронной операции может быть доступен позже, после завершения операции.

console.log('Начало');

// setTimeout - асинхронная функция, которая вызовет колбэк через 1000 миллисекунд (1 секунда)
setTimeout(function() {
  console.log('Колбэк выполнен');
}, 1000);

console.log('Конец');

Начало
Конец
Колбэк выполнен

Обратите внимание, что "Колбэк выполнен" появляется позже, чем "Конец", потому что 
setTimeout запускает асинхронную операцию и продолжает выполнение кода без ожидания завершения операции.

todo 13-2 Как работает XMLHTTPRequest (AJAX)

Что такое AJAX
AJAX - Asynchronous Javascript and XML - технология обращения к серверу без перезагрузки страницы. За счет этого уменьшается время отклика веб-приложения по 
интерактивности больше напоминает десктоп
Несмотря на то, что в названии технологии присутствует буква X (от слова XML), использовать XML вовсе не обязательно. Под AJAX подразумевают любое общение с сервером без 
перезагрузки страницы, организованное при помощи JS

Что можно сделать с AJAX? 
Элементы интерфейса
В первую очередь AJAX полезен для форм и кнопок, связанных с элементарными действиями: добавить в корзину, подписаться и т.п. Сейчас - в порядке вещей, что такие действия на сайтах осуществляются без перезагрузки страницы.
Динамическая подгрузка данных
Например, дерево, которое при раскрытии узла запрашивает данные у сервера.
Живой поиск
Пользователь начинает печатать поисковую фразу, а JS предлагает возможные варианты, получая список самых вероятных дополнений с сервера

Как выполнять AJAX запросы?
Для этого существует специальный объект в браузере:

XMLHttpRequesr
Это встроенный в браузер объект, котоырй дает возможность делать HTTP-запросы к серверу без перезагрузки страницы.
Несмотря на наличие слова "XML" в названии, XMLHttpReqest может работать с любыми данными, а не только с XML. Мы можем загружать/скачивать файлы, отслеживать прогресс и многое другое
--------
На сегодняшний день не обязательно использовать XMLHttpRequest, так как существует другой, более современный метод fetch.
В современной веб-разработке XMLHttpRequest используется по 3 причинам:
  1. По историческим причинам: существует много кода, использующего XMLHttpRequest, который нужно поддерживать 
  2. Необходимость поддерживать старые браузеры и нежелание использовать полифилы (например, чтобы уменьшить количество кода)
  3. Потребность в функциональности, которую fetch пока что не может предоставить, к примеру, отслеживание прогресса отправки на сервер
Fetch - ES6, а XMLHttpRequest - ES5, т.е. до 2015 года


Непосредственно урок
Public API - https://github.com/public-apis/public-apis
Откроем MeowFacts
A simple api that returns a random fact about cats on a GET request
Создадим переменную const request, которая будет экземпляром класса = new XMLHttpRequest(function(){})
Чтобы подключиться к какому-либо удаленному серверу, нам нужно подключиться к этой переменной и использовать метод OPEN() и написать 2 параметра: 'GET', "удаленный сервер с которым нужно связаться". УДаленнный сервер для связи из API - https://meowfacts.herokuapp.com/

Метод open связывает наш код с каким-то удаленным сервером
GET - чтобы получить какие-либо данные
POST для отправления каких-либо данных

Но как получить данные?
Нужно прописать дополнительно метод send
request.send();
и при вызове console.log(request) какие-то данные заполнились
Можем обратиться к request.responseText
Но так ничего не получится, потому что так будет асинхронный код.

Это фича XMLHttpRequest, в котором может быть несколько параметров, один из которых async и если указать ему false, то код будет выполнен синхронно
Но переназначать мы не будем.
Как тогда сделать так, чтобы мы не ждали ответ от сервера?
Значит нам нужно использовать какой-либо обработчик события, который сработает тогда, когда у нас все загрузится
пишем request.addEventListener("load", function(){
  console.log(request.responseText);
})

Теперь код не блокируется
И если в конце напишем console.log("Hello"),
то он выполнится раньше, чем получение данных от request, т.к. выполняется асинхронно

Так как мы общаемся с сервером, он не знает что такое обычный объект он работает на формате данных JSON, т.е. нам нужно конвертировать его
JSON.parse(request.responseText), запишем его в переменную и деструктурируем
const data = JSON.parse(request.responseText)
const [text] = data.data (потому что именно тут лежит инфа, которая нам нужна)
console.log(text)


Можем настроить API и получать не 1, а несколько фактов о кошках (см документацию API)
https://meowfacts.herokuapp.com/?conut=3
*/
const request = new XMLHttpRequest();
request.open("GET", "https://meowfacts.herokuapp.com/?count=3");
request.send();

request.addEventListener("load", function () {
  const data = JSON.parse(request.responseText);
  console.log(data);
  const [text1, text2, text3] = data.data;
  console.log(text1);
  console.log(text2);
  console.log(text3);
});
