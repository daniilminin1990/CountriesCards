'use strict';

const countriesContainer = document.querySelector('.countries');
const btn = document.querySelector('.btn-country');
const reverseGeoApiKey = '2782861fb2944909b32da2a65d8946dc';
const inputEl = document.querySelector('.autocomplete-input');
const ulForAutocomplete = document.querySelector('.autocomplete-wrapper');
const dropdown = document.querySelector('.dropdown');

// ! –í–ù–ò–ú–ê–ù–ò–ï . –£–î–ê–õ–ò API –∫–ª—é—á –ø–æ—Å–ª–µ auth= –ø—Ä–∏ —Ä–µ–ª–∏–∑–µ

// Fetch all countries
// const arrOfAllCountriesName = [];
// function getAllCountries() {
//   fetch(`https://restcountries.com/v3.1/all`)
//     .then((response) => {
//       return response.json();
//     })
//     .then((data) => {
//       data;
//       console.log(data);
//       for (const country of data) {
//         arrOfAllCountries.push([
//           country.name.common,
//           country.translations.rus.common,
//         ]);
//       }
//     });
// }
// getAllCountriesName();
// console.log(arrOfAllCountries);

// Async await all countries

let countryNames = [];
async function getAllCountriesName() {
  const response = await fetch(`https://restcountries.com/v3.1/all`);
  const data = await response.json();

  countryNames = data.map((country) => {
    return [country.name.common, country.translations.rus.common];
  });

  // country.translations.rus.common,
}
getAllCountriesName();

// –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –≤–≤–æ–¥–µ –≤ input
inputEl.addEventListener('input', onInputChange);

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–ª–µ input, —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ–π array, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Å—Ç—Ä–∞–Ω–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ –≤–≤–æ–¥–∏–º—ã–º –±—É–∫–≤–∞–º
function onInputChange() {
  removeAutocompleteDropdown();
  const value = inputEl.value.toLowerCase();

  if (value.length === 0) return;

  // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —è–∑—ã–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤ input
  const language = /[–ê-–Ø–∞-—è–Å—ë]/i.test(inputEl.value) ? 1 : 0;

  const filteredNames = [];
  // ! –í—ã–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
  for (let countryName of countryNames) {
    if (
      countryName[language].substring(0, value.length).toLowerCase() === value
    ) {
      filteredNames.push(countryName[0]);
    }
  }
  console.log(filteredNames);
  createAutocompleteDropdown(filteredNames);
}
// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–ª–∞—Å—Å–∞–º–∏ –∏ id
function createAutocompleteDropdown(list) {
  const listEl = document.createElement('ul');
  listEl.className = 'autocomplete-list';
  // –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—à–µ–≥–æ—Å—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
  listEl.id = 'autocomplete-list';

  list.forEach((country) => {
    const listItem = document.createElement('li');
    const countryButton = document.createElement('button');
    countryButton.innerHTML = country;
    // –í—ã–∑–æ–≤ onCountryButtonClick –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
    countryButton.addEventListener('click', onCountryButtonClick);
    listItem.appendChild(countryButton);
    listEl.appendChild(listItem);
  });

  ulForAutocomplete.appendChild(listEl);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
function removeAutocompleteDropdown() {
  const listEl = document.querySelector('#autocomplete-list');
  if (listEl) listEl.remove();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ + –∑–∞–ø—É—Å–∫ getCountryData
function onCountryButtonClick(e) {
  e.preventDefault();
  const buttonEl = e.target;
  inputEl.value = buttonEl.innerHTML;

  getCountryData(inputEl.value);
  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  countriesContainer.innerHTML = '';
  removeAutocompleteDropdown();
}

//! Fetch —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–ª–∏ –°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω –Ω–µ—Ç + –¥–æ–±–∞–≤–∏–ª–∏ –≤—Å–µ —Å–æ—Å–µ–¥–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
function renderCards(data, className = '') {
  const html = `<article class="country ${className}">
          <img class="country__img" src="${data.flags.svg}" />
          <div class="country__data">
            <h3 class="country__name">${data.name.common}</h3>
            <h4 class="country__region">${data.region}</h4>
            <p class="country__row"><span>üë´</span>${data.population}</p>
            <p class="country__row"><span>üó£Ô∏è</span>${
              Object.entries(data.languages)[0][1]
            }</p>
            <p class="country__row"><span>üí∞</span>${
              Object.entries(Object.entries(data.currencies)[0][1])[0][1]
            }</p>
          </div>
        </article>`;
  countriesContainer.insertAdjacentHTML('beforeend', html);
}

// –†–µ–Ω–¥–µ—Ä –æ—à–∏–±–∫–∏ –≤ HTML
function renderError(message) {
  countriesContainer.insertAdjacentHTML('beforeend', message);
}

// –§—É–Ω–∫—Ü–∏—è fetch —Å –ø—Ä–æ–±—Ä–æ—Å–æ–º –æ—à–∏–±–∫–∏
function getJSON(url, errorMsg = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. ') {
  return fetch(url).then((response) => {
    if (!response.ok) {
      throw new Error(`${errorMsg} ${response.status})`);
    }
    return response.json();
  });
}

function getCountryData(country) {
  // –°—Ç—Ä–∞–Ω–∞, –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
  getJSON(
    `https://restcountries.com/v3.1/name/${country}`,
    '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–µ—Ä–æ—è—Ç–Ω–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω—ã –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞'
  )
    .then((data) => {
      renderCards(data[0]);

      // –°—Ç—Ä–∞–Ω—ã —Å–æ—Å–µ–¥–∏
      const neighboursData = data[0].borders;
      console.log(neighboursData);
      if (!neighboursData) {
        throw new Error(`—Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω –Ω–µ—Ç`);
      }
      // –°–¥–µ–ª–∞–µ–º —á–µ—Ä–µ–∑ Promise.all –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ—Å–µ–¥—É. –ú–∞—Å—Å–∏–≤ –¥–ª—è PromiseReults –∫–∞–∂–¥–æ–π —Å–æ—Å–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω—ã
      const neighboursFetches = neighboursData.map((neighbour) =>
        getJSON(`https://restcountries.com/v3.1/alpha/${neighbour}`)
      );
      return Promise.all(neighboursFetches);
    })
    .then((neighbours) => {
      for (const neighbourTitle of neighbours) {
        const [res] = neighbourTitle;
        renderCards(res, 'neighbour');
      }
    })
    .catch(function (err) {
      renderError(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ - ${err.message}.`);
    })
    .finally(() => {
      countriesContainer.style.opacity = 1;
    });
}

//! Reverse geolocation fetch then
// –°—Ç—Ä–∞–Ω–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
function getCountryByLocation() {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
  navigator.geolocation.getCurrentPosition(
    function (pos) {
      const { latitude, longitude } = pos.coords;
      console.log(latitude);
      console.log(longitude);
      fetch(
        `https://api.geoapify.com/v1/geocode/reverse?lat=${latitude}&lon=${longitude}&format=json&apiKey=${reverseGeoApiKey}`
      )
        .then((response) => {
          //         –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
          if (!response.ok) {
            throw new Error(`–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ (${response.status})`);
          }
          return response.json();
        })
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        .then((result) => {
          console.log(result.results[0].country);
          const country = result.results[0].country;
          return fetch(`https://restcountries.com/v3.1/name/${country}`);
        })
        .then((response) => {
          return response.json();
        })
        .then((data) => {
          console.log(data[0]);
          renderCards(data[0]);
          // –°—Ç—Ä–∞–Ω–∞ —Å–æ—Å–µ–¥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω
          const neighboursData = data[0].borders;
          console.log(neighboursData);
          if (!neighboursData) {
            throw new Error(`—Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω –Ω–µ—Ç`);
          }
          const neighboursFetches = neighboursData.map((neighbour) =>
            getJSON(`https://restcountries.com/v3.1/alpha/${neighbour}`)
          );
          return Promise.all(neighboursFetches);
        })
        .then((neighbours) => {
          for (const neighbourTitle of neighbours) {
            const [res] = neighbourTitle;
            renderCards(res, 'neighbour');
          }
        })
        .catch(function (err) {
          renderError(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ ${err.message}.`);
          console.log(err);
        })
        .finally(() => {
          countriesContainer.style.opacity = 1;
        });
    },
    function () {
      alert('–í—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ —Å–≤–æ—é –≥–µ–æ-–ª–æ–∫–∞—Ü–∏—é');
    }
  );
}

btn.addEventListener('click', () => {
  getCountryByLocation();
});

// ! Async/Await –¥–ª—è –≤–≤–æ–¥–∏–º—ã—Ö –≤ input
// function renderCards(data, className = '') {
//   const html = `<article class="country ${className}">
//           <img class="country__img" src="${data.flags.svg}" />
//           <div class="country__data">
//             <h3 class="country__name">${data.name.common}</h3>
//             <h4 class="country__region">${data.region}</h4>
//             <p class="country__row"><span>üë´</span>${data.population}</p>
//             <p class="country__row"><span>üó£Ô∏è</span>${
//               Object.entries(data.languages)[0][1]
//             }</p>
//             <p class="country__row"><span>üí∞</span>${
//               Object.entries(Object.entries(data.currencies)[0][1])[0][1]
//             }</p>
//           </div>
//         </article>`;
//   countriesContainer.insertAdjacentHTML('beforeend', html);
// }

// // –†–µ–Ω–¥–µ—Ä –æ—à–∏–±–∫–∏ –≤ HTML
// function renderError(message) {
//   countriesContainer.insertAdjacentHTML('beforeend', message);
// }

// // –§—É–Ω–∫—Ü–∏—è fetch —Å –ø—Ä–æ–±—Ä–æ—Å–æ–º –æ—à–∏–±–∫–∏
// async function getJSON(url, errorMsg = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. ') {
//   const response = await fetch(url);
//   if (!response.ok) {
//     throw new Error(`${errorMsg} ${response.status})`);
//   }
//   return response.json();
// }

// async function getCountryData(country) {
//   // –°—Ç—Ä–∞–Ω–∞, –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
//   try {
//     const data = await getJSON(
//       `https://restcountries.com/v3.1/name/${country}`,
//       '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–µ—Ä–æ—è—Ç–Ω–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω—ã –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞'
//     );
//     renderCards(data[0]);
//     // –°—Ç—Ä–∞–Ω—ã —Å–æ—Å–µ–¥–∏
//     const neighboursData = data[0].borders;
//     if (!neighboursData) {
//       throw new Error(`—Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω –Ω–µ—Ç`);
//     }
//     // –°–¥–µ–ª–∞–µ–º —á–µ—Ä–µ–∑ Promise.all –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ—Å–µ–¥—É. –ú–∞—Å—Å–∏–≤ –¥–ª—è PromiseReults –∫–∞–∂–¥–æ–π —Å–æ—Å–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω—ã
//     const neighboursFetches = neighboursData.map((neighbour) =>
//       getJSON(`https://restcountries.com/v3.1/alpha/${neighbour}`)
//     );
//     const neighbours = await Promise.all(neighboursFetches);
//     for (const neighbourTitle of neighbours) {
//       const [res] = neighbourTitle;
//       renderCards(res, 'neighbour');
//     }
//   } catch (err) {
//     renderError(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ - ${err.message}.`);
//   } finally {
//     countriesContainer.style.opacity = 1;
//   }
// }
